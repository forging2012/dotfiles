" ====== Package Dependences =====
" ctags

"屏蔽 <esc>键，包括 <c-]> <c-c>
"inoremap <esc> <nop>
"-----------------------------------------------------------------------------
"RULES:
"<leader>o : start the plugin command
"<leader>x : start the file type chagne
"-----------------------------------------------------------------------------

"-----------------------------------------------------------------------------
"< 判断是linux还是windows >
"-----------------------------------------------------------------------------
let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif

"-----------------------------------------------------------------------------
"< 判断是终端还是 Gvim >
"-----------------------------------------------------------------------------
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif


"=========================== 插件管理 开始 ===========================
"Vundle Github:https://github.com/VundleVim/Vundle.vim
set nocompatible              " required
filetype off                  " required

if (g:iswindows && g:isGUI)
    set rtp+=$VIM/vimfiles/bundle/Vundle.vim/
    call vundle#begin('$VIM/vimfiles/bundle/')
else
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
endif

" === 插件管理核心库 ===
Plugin 'VundleVim/Vundle.vim'
" 如果你的插件来自github，写在下方，只要作者名/项目名就行了
" Plugin 'tpope/vim-fugitive'
" 如果插件来自 vim-scripts，你直接写插件名就行了
" Plugin 'L9'
" 如使用自己的git库的插件，像下面这样做
" Plugin 'git://git.wincent.com/command-t.git'
" 本地插件
" Plugin 'file:///Users/gmarik/path/to/plugin'
"=========================== 下面放插件配置内容 ======================

"============================文件浏览===========================
" 文件浏览器 F8
Plugin 'The-NERD-tree'
"map <leader>nt :NERDTree<CR> " 避免以n开头，拖缓搜索时n的速度
"map <F8> :NERDTreeToggle<CR> " F8开关NERDTree
noremap <F8> :NERDTreeTabsToggle<CR> " F8开关所有NERDTree
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"auto close
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

" Tagbar F9 切换
Plugin 'majutsushi/tagbar'
nnoremap <F9> :TagbarToggle<CR>
"Fix on mac:
"wget http://prdownloads.sourceforge.net/ctags/ctags-5.8.tar.gz
"tar xf ctags-5.8.tar.gz && cd ctags-5.8
"./configure --prefix=/usr/local/ctags && make && sudo make install
let g:tagbar_ctags_bin='/usr/local/ctags/bin/ctags'

"======================= 插件必须放在此行之前 ========================
call vundle#end()            " required
filetype plugin indent on    " required
"Brief help
"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
":PluginList          - list configured plugins
":PluginInstall(!)    - install(update) plugins
":PluginSearch(!) foo - search(or refresh cache first) for foo
":PluginClean(!)      - confirm(or auto-approve) removal of unused plugins
" ======================= 插件管理结束 PERSONAL START ================

" === 编码配置 ====
" 注：使用utf-8格式后，软件与程序源码、文件路径不能有中文，否则报错
" 设置gvim内部编码，默认不更改
set encoding=utf-8
" 设置当前文件编码，可以更改，如：gbk（同cp936）
set fileencoding=utf-8
" 设置支持打开的文件的编码
set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1

" 文件格式，默认 ffs=dos,unix
set fileformat=unix             "设置新（当前）文件的<EOL>格式，可以更改，如：dos（windows系统常用）
set fileformats=unix,dos,mac    "给出文件的<EOL>格式类型

" === 编写文件时的配置 ===
" 空格代替tab
" set expandtab
" >>命令缩进的大小=4
set shiftwidth=4
set tabstop=4
set softtabstop=4
" 指定按一次backspace就删除shiftwidth宽度
set smarttab
" 按照 C 语言的语法，自动地调整缩进的长度
set cindent
" 自动地将当前行的缩进拷贝到新行，也就是"自动对齐”
set noautoindent
" 自动闭合缩进
set smartindent

" 启用折叠
set foldenable
" 启动时开启的折叠层数
set foldlevel=5
"折叠方式有 indent, marker, syntax，这里是indent
set foldmethod=indent
"忽略的行开头
set foldignore=

" === Other ===
" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=5

" 常规模式下用空格键来开关光标行所在折叠（注：zR 展开所有折叠，zM 关闭所有折叠）
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 当文件在外部被修改，自动更新该文件
set autoread

" 常规模式下输入 cS 清除行尾空格
nnoremap cS :%s/\s\+$//g<CR>:noh<CR>
" 常规模式下输入 cM 清除行尾 ^M 符号
nnoremap cM :%s/\r$//g<CR>:noh<CR>
" convert tab to 4 space
nnoremap cT :%s/\t/    /g<CR>:noh<CR>

" 关闭兼容VI按键
set nocompatible
" 开启文件类型侦测,根据侦测到的不同类型加载对应的插件,并采用不同的缩进
filetype plugin indent on
"共用系统剪贴板
"http://vim.wikia.com/wiki/Accessing_the_system_clipboard
"set clipboard+=unnamedplus
"文本选择后自动复制到系统粘贴板:怎么用？
"set guioptions+=a
" 启用鼠标
set mouse=a

" === Files ===
set autochdir
" 保存文件前建立备份，保存成功后删除该备份
set writebackup
" 无备份文件
set nobackup
"无临时文件
"set noswapfile
"退出vim后，内容显示在终端屏幕, 可以用于查看和复制。
"set t_ti= t_te=

" === 全局变量 ===
" 历史记录条数
set history=2000

" === 搜索设置 ===
" 高亮搜索词
set hlsearch
" 实时匹配
set incsearch
" 忽略大小写
set ignorecase
" 另外：==的行为取决于用户的设置
" ==?是"无论你怎么设都大小写不敏感"比较操作符
" ==#是"无论你怎么设都大小写敏感"比较操作符

" 从头开始循环查找
set wrapscan
" vim 自身命令行模式智能补全
set wildmenu
"close persistent undo with the '*.un~'
"set noundofile
" Keep search pattern at the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" === 外观设置 ===
" 显示行号
set relativenumber number
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber number
    else
        set relativenumber
    endif
endfunction
nnoremap <F3> :call NumberToggle()<cr> " 切换绝对/相对行号

" 去掉欢迎界面
set shortmess=atI
" 语法高亮开启
syntax on
" 显示括号配对情况
set showmatch
" 匹配括号显示时长
set matchtime=2
set cursorline
set cursorcolumn
set gcr=n-v:block-blinkon0,i:ver25-Cursor-blinkon0,r:hor20-Cursor-blinkon0

" === 状态栏设置 ===
" 显示按键
set showcmd
" 显示模式状态
set showmode
set ruler
" 高度
set cmdheight=2
set visualbell
"显示特殊字符，其中Tab使用高亮~代替，尾部空白使用高亮点号代替
"set list
" 按键超时
set timeout timeoutlen=800

" === 字体设置 ===
" 注意不同平台的字体设置方式区别
if (has("gui_gtk2") || has("gui_gtk3"))
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 11
elseif has("gui_macvim")
    "set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h13
    set guifont=Inconsolata\ for\ Powerline:h16
elseif has("gui_win32")
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h11
endif

" === 按键设置 ===
" 设置 Leader 为 ,
let mapleader=","
let maplocalleader=","
" ; ==> :
nnoremap ; :
" @@ ==> 邮箱
iabbrev @@ garden.yuen@gmail.com
"Go to the head and end
"noremap H ^
"noremap L $
" c+s+up 上移当前行
nnoremap <C-S-Up> ddkP
" c+s+down 下移当前行
nnoremap <C-S-Down> ddp
" Ctrl + H 光标移动[插入模式]、切换左窗口[Normal模式]
inoremap <c-h> <left>
noremap <c-h> <c-w><c-h>
" Ctrl + L 光标移动[插入模式]、切换右窗口[Normal模式]
inoremap <c-l> <right>
noremap <c-l> <c-w><c-l>
" Ctrl + J 光标移动[插入模式]、切换下窗口[Normal模式]
inoremap <c-j> <down>
noremap <c-j> <c-w><c-j>
" Ctrl + K 光标移动[插入模式]、切换上窗口[Normal模式]
inoremap <c-k> <up>
noremap <c-k> <c-w><c-k>

" leader+w ==> 插入模式保存
inoremap <leader>w <ESC>:w<CR>l
" leader*2 ==> esc [i,v]
inoremap <leader><leader> <ESC>l
vnoremap <leader><leader> <ESC>
" jk ==> esc [i]
inoremap jk <esc>l
" leader*2 ==> add , after current line [n]
nnoremap <leader>, mzA,<esc>`z

" add new blank
nnoremap <C-n><C-j> mzo<esc>`z
nnoremap <C-n><C-k> mzO<esc>`z

"================ 编辑映射 EDIT MAPPING =================
" c+u 转换当前单词为大写 [i]
inoremap <c-u> <esc>viwU<esc>ea
" leader+['/"/`] ==> 为word添加引号 [n]
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>` viw<esc>a`<esc>hbi`<esc>lel
nnoremap <leader>* viw<esc>a*<esc>hbi*<esc>lel
" add ; after line
nnoremap <leader>; mz A;<esc>`z
inoremap <leader>; <esc>mz A;<esc>`za
" simple align current file [n]
nnoremap <leader>= gg=G

" === Tabs操作 ===
" leader+[h/l] ==> first/last tab [n]
nnoremap <leader>h :tabfirst<cr>
nnoremap <leader>l :tablast<cr>

" leader+[j/k] ==> next/pre tab [n]
nnoremap <leader>j :tabnext<cr>
nnoremap <leader>k :tabprev<cr>

" leader+[e/d/D] ==> tab edit/close/close!
nnoremap <leader>e :tabedit<cr>
nnoremap <leader>d :tabclose<cr>
nnoremap <leader>D :tabclose!<cr>

"move current tab to, default last
nnoremap <leader>m :tabm
"nnoremap <leader>bt :bufdo tab split<cr>

" Ctrl+t ==> 新建tab
nnoremap <C-t> :tabnew<CR>
inoremap <C-t> <Esc>:tabnew<CR>

" Ctrl+x ==> 删除行 来源sublime
nnoremap <C-x> dd
" Ctrl+c ==> 复制行 来源sublime
nnoremap <C-c> V"+y

" === session ===
" leader+ss ==> 保存当前会话
" leader+es ==> 载入上次保存的会话
if g:islinux
    nnoremap <leader>ss :mksession! ~/.mysession.vim<cr>
    nnoremap <leader>es :source ~/.mysession.vim<cr>
else
    nnoremap <leader>ss :mksession! $VIM/.mysession.vim<cr>
    nnoremap <leader>es :source $VIM/.mysession.vim<cr>
endif

" === EDIT ===
" leader+a ==> select All [n]
nnoremap <leader>sa ggVG
" leader+y ==> 将选中文本块复制至系统剪贴板 [n,v]
vnoremap <Leader>y "+y
nnoremap <Leader>y V"+y
" leader+p ==> 将系统剪贴板内容粘贴至 vim [n,v,i]
nnoremap <Leader>p "+p
vnoremap <Leader>p "+p
inoremap <Leader>p <esc>"+p
" leader+q ==> 关闭当前分割窗口 [n,i]
nnoremap <Leader>q :q<CR>
inoremap <Leader>q <esc>:q<CR>
" leader+w ==> 保存当前窗口内容 [n]
nnoremap <Leader>w :w<CR>
"保存所有窗口内容并退出
"nnoremap <Leader>WQ :wa<CR>:q<CR>
" leader+W ==> 无权限保存时sudo [n]
nnoremap <Leader>W :w !sudo tee %<CR>
" leader+Q ==> 不做任何保存&退出 vim [n]
nnoremap <Leader>Q :q!<CR>
" leader+a ==> 复制所有至公共剪贴板 [n]
nnoremap <leader>a <esc>ggVG"+y<esc>
" leader+ev ==> 编辑当前所使用的Vim配置文件 [n]
nnoremap <leader>ev <esc>:tabnew $MYVIMRC<cr>
" leader+sv ==> 载入当前所使用的Vim配置文件 [n]
nnoremap <leader>sv :source $MYVIMRC<cr>
" < or > ==> 调整缩进后自动选中，方便再次操作 [v]
vnoremap < <gv
vnoremap > >gv

" === 切换语法高亮 [n,i] ===
" leader+xphp ==> 一键切换到PHP语法高亮
inoremap <leader>xphp <esc>:se ft=php<cr>li
nnoremap <leader>xphp <esc>:se ft=php<cr>
" leader+xjs ==> 一键切换到JavaScript语法高亮
inoremap <leader>xjs <esc>:set ft=javascript<cr>li
nnoremap <leader>xjs <esc>:set ft=javascript<cr>
" leader+xcss ==> 一键切换到CSS语法高亮
inoremap <leader>xcss <esc>:se ft=css<cr>li
nnoremap <leader>xcss <esc>:se ft=css<cr>
" leader+xhtml ==> 一键切换到HTML语法高亮
inoremap <leader>xhtml <esc>:se ft=html<cr>li
nnoremap <leader>xhtml <esc>:se ft=html<cr>
" leader+xpy ==> 一键切换到PYTHON语法高亮
inoremap <leader>xpy <esc>:se ft=Python<cr>li
nnoremap <leader>xpy <esc>:se ft=Python<cr>
" leader+xvi ==> 一键切换到VIM配置文件语法高亮
inoremap <leader>xvi <esc>:se ft=vim<cr>li
nnoremap <leader>xvi <esc>:se ft=vim<cr>

" === 上排F功能键 ===
" // F2 行号开关，用于鼠标复制代码用
" F2重新载入vim配置
" F3 切换绝对/相对行号
" F4 显示可打印字符开关
" F5 粘贴模式paste_mode开关,用于有格式的代码粘贴
" F6 语法开关，关闭语法可以加快大文件的展示
" F7 换行开关
" F8开关NERDTree
" F9开关Tagbar
" F11在linux环境可切换全屏
" Linux: 先自行安装 wmctrl: sudo apt-get install wmctrl -y
" Windows: Put gvim_fullscreen.dll into the same directory where gvim.exe located.

function! HideNumber()
    if(&relativenumber == &number)
        set relativenumber! number!
    elseif(&number)
        set number!
    else
        set relativenumber!
    endif
    set number?
endfunction

"nnoremap <F2> :call HideNumber()<CR>
nnoremap <F2> :source $MYVIMRC<cr>
nnoremap <F4> :set list! list?<CR>
set pastetoggle=<F5> "插入模式粘贴不会自动缩进避免混乱
nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>
nnoremap <F7> :set wrap! wrap?<CR>

"F11全屏
if g:islinux
    "先自行安装 wmctrl: sudo apt-get install wmctrl -y
    "将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数
    fun! ToggleFullscreen()
        call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
    endf
    "全屏开/关快捷键
    if g:isGUI
        map <silent> <F11> :call ToggleFullscreen()<CR>
        "启动 vim 时自动全屏
        "autocmd VimEnter * call ToggleFullscreen()
    endif
endif

